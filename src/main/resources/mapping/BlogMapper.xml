<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- namespace和dao的接口对应 -->
<!-- 如果是多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始 好像这个不行？ 直接不写parameterType，直接传值即可 
	insert： 插入n条记录，返回影响行数n。（n>=1，n为0时实际为插入失败） update：更新n条记录，返回影响行数n。（n>=0） delete： 
	删除n条记录，返回影响行数n。（n>=0） -->

<!-- 注意：这个insert/update/delete标签只是一个模板，在做操作时，其实是以SQL语句为核心的 即在做增/删/时，insert/update/delete标签可通用 
	，但做查询时只能用select标签，我们提倡什么操作就用什么标签 -->
<mapper namespace="com.yuer.dao.IBlogDao">

	<!-- 存储博客时标签是单独存在另一个博客与标签的关联表的 -->
	<insert id="saveBlog" parameterType="Blog" useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO hi_blog(content,create_time,description,first_picture,flag,is_appreciate,is_comment,is_open_copyright,is_published,is_recommend,title,update_time,view_counts,type_id,user_id) 
		VALUES (#{content}, #{createTime}, #{description}, #{firstPicture}, #{flag}, #{isAppreciate}, #{isComment}, #{isOpenCopyright},#{isPublished}, 
		#{isRecommend}, #{title}, #{updateTime},  #{viewCounts},  #{type.id},  #{user.id})
	</insert>
	
	<insert id="saveTags" parameterType="Long">
		insert into hi_blog_tags values(#{blogId},#{tagId})
	</insert>
	
	<delete id="deleteTags" parameterType="Long">
		delete from hi_blog_tags where blogs_id = #{id}
	</delete>
	
	<select id = "getTags" parameterType="Long" resultType="Long">
		select tags_id from hi_blog_tags where blogs_id = #{blogId}
	</select>
	
	

	<select id="deleteBlog" parameterType="Long">
		<!-- 还有使用了别名就不能使用原名了 可以通过空格或者as给表起别名但是注意如果操作的数据库是Oracle的话，只能使用空格，as不符合Oracle的语法。 -->
		<!-- 报错原因记录一下都得记录在博客上得： 原因：mysql不支持平常得别名写法，其他数据库可能支持如Oracle 加一点东西就可以解决报错 
			delete t from hi_Blog t where t.id = #{id} 有几个别名写几个 -->
		<!-- delete from hi_Blog t where t.id = #{id} 这个报错 -->
		delete from hi_blog where id = #{id}
	</select>


	<!-- mybatis中如果是select标签中使用update语句不会有返回值，，，所以得改为update -->
	<update id="updateBlog" parameterType="Blog">
		update hi_blog b set b.content = #{content},b.create_time = #{createTime},b.description = #{description},b.first_picture = #{firstPicture}
		,b.flag = #{flag},b.is_appreciate = #{isAppreciate},b.is_comment = #{isComment},b.is_open_copyright = #{isOpenCopyright},b.is_published = #{isPublished},
		b.is_recommend = #{isRecommend},b.title = #{title},b.update_time = #{updateTime},b.view_counts = #{viewCounts},
		b.type_id = #{type.id},b.user_id = #{user.id}
		 where
		b.id = #{id}
	</update>


	<select id="getBlogById" resultMap="BlogMap"
		parameterType="Long">
		select * from hi_blog t where t.id = #{id}
	</select>


	<!-- resultType: 1、基本类型 ：resultType=基本类型 2、List类型： resultType=List中元素的类型 
		3、Map类型 resultType =map -->
	<select id="listBlog" resultMap="BlogMap">
		select * from hi_Blog
	</select>

	<!-- mysql没有提供top,但是好像可以使用limit实现  -->
	<select id ="listBlogTop" resultMap="BlogMap" parameterType="Integer"> 
		select id,title from hi_blog where is_published = 1 and is_recommend = 1  order by update_time desc limit #{size} </select>

	<!-- 这里返回值可能注入错误，需要进行Map映射 -->
	<select id="listBlogByParam" resultMap="BlogMap"
		parameterType="Integer">
		select * from hi_blog order by id limit #{start},
		#{size}
	</select>
	
	<select id="listBlogByParamAndPublished" resultMap="BlogMap"
		parameterType="Integer">
		select * from hi_blog where is_published = 1 order by id limit #{start},
		#{size}
	</select>

	<resultMap type="Blog" id="BlogMap">
		<result property="id" column="id" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="createTime" column="create_time" />
		<result property="updateTime" column="update_time" />
		<result property="firstPicture" column="first_picture" />
		<result property="flag" column="flag" />
		<result property="viewCounts" column="view_counts" />
		<result property="isAppreciate" column="is_appreciate" />
		<result property="isOpenCopyright" column="is_open_copyright" />
		<result property="isComment" column="is_comment" />
		<result property="isRecommend" column="is_recommend" />
		<result property="isPublished" column="is_published" />
		<result property="user.id" column="user_id" />
		<result property="type.id" column="type_id" />
		<result property="description" column="description" />
	</resultMap>


	<select id="getTotal" resultType="Integer">
		select count(*) from hi_blog
	</select>
	
	<select id="getTotalAndPublished" resultType="Integer">
		select count(*) from hi_blog where is_published = 1
	</select>
	
	<select id="getTotalAndPublishedAndSearch" resultType="Integer" parameterType="String">
		select count(*) from hi_blog where is_published = 1 and ( title like "%"#{query}"%" or content like "%"#{query}"%")
	</select>
	
	<select id="getTotalAndPublishedAndTypeId" resultType="Integer" parameterType="Long">
		select count(*) from hi_blog where is_published = 1 and type_id = #{id}
	</select>
	
	
	<select id="getTotalAndPublishedAndTagId" resultType="Integer" parameterType="Long">
		select count(*) from hi_blog_tags where tags_id =  #{id}
	</select>
	
	

	<select id="getBlogByBlogName" resultMap="BlogMap"
		parameterType="String">
		select * from hi_blog t where t.blog_name = #{blogName}
	</select>

	<!-- 这里进行多条件查询，传来的是BlogQuery，到前台时看情况还得封装一个包含是否发布，前台不能显示没有发布的，到时候再封装 -->
	<select id="getBlogByParams" resultMap="BlogMap">
		select * from hi_blog
		<where>
			<!-- 这里title应该时进行模糊查询 -->
			<if test="blog.title!= null and blog.title != ''">
				title like "%"#{blog.title}"%"
			</if>
			<if test="blog.typeId != null and blog.typeId != ''">
				and type_id = #{blog.typeId}
			</if>
			<if test="blog.isRecommend != null and blog.isRecommend != ''">
				and is_recommend = #{blog.isRecommend}
			</if>
		</where>

		order by id limit #{start},#{size}

	</select>


	<!-- 这里好像得加and 还有like查询得‘’
	因为#{...}解析成sql语句时候，会在变量外侧自动加单引号'  '，
	所以这里 % 需要使用双引号"  "，不能使用单引号 '  '，不然会查不到任何结果。-->
	<select id="getTotalByParams" resultType="Integer"
		parameterType="BlogQuery">
		select count(*) from hi_blog
		<where>
			<if test="title!= null and title != ''">
				title like "%"#{title}"%"
			</if>
			<if test="typeId != null and typeId != ''">
				and type_id = #{typeId}
			</if>
			<if test="isRecommend != null and isRecommend != ''">
				and is_recommend = #{isRecommend}
			</if>
		</where>


	</select>

	
	<select id = "listBlogBySerach"  resultMap="BlogMap">
		select * from hi_blog where is_published = 1 and ( title like "%"#{query}"%" or content like "%"#{query}"%")
		order by id limit #{start},#{size}
	</select>
	
	<select id = "listBlogByTypeId"  resultMap="BlogMap">
		select * from hi_blog where is_published = 1 and type_id = #{id}
		order by update_time desc limit #{start},#{size}
	</select>
	
	<select id = "listBlogByTagId"  resultMap="BlogMap">
		select * from hi_blog where is_published = 1 and id in (select blogs_id from hi_blog_tags where tags_id =  #{id})
		order by update_time desc limit #{start},#{size}
	</select>
	
	<update id="updateViewCounts" parameterType="Long">
		update hi_blog b set b.view_counts = b.view_counts + 1 where b.id = #{id}
	</update>
	
	<select id = "findGroupYear" resultType="String">
		select year(update_time) as year from hi_blog b where b.is_published = 1 group by year order by year desc 
	</select>
	
	<select id="findByYear" resultMap="BlogMap" parameterType="String">
		select * from hi_blog where year(update_time) = #{year}
	</select>






</mapper>

